
// 1. Crea una función que retorne a otra función


function myFunction(){
    return function(){
        console.log('Mi otra funcion ')
    }

}

const funcionRetornada = myFunction();
funcionRetornada(); 





// 2. Implementa una función currificada que multiplique 3 números
function multiply(a){
    return function(b){
        return function(c){
            return a*b*c;
        }
    }
}

const result = multiply(2)(3)(4);
console.log(result);



// 3. Desarrolla una función recursiva que calcule la potencia de un número elevado a un exponente

function potencia(base,exponente){

    if(exponente ===0){
        return 1
    }

    return base * potencia(base,exponente -1);
}

const resultado = potencia(2,3);
console.log(resultado) 


// 4. Crea una función createCounter() que reciba un valor inicial y retorne un objeto con métodos para increment(), decrement() y getValue(), utilizando un closure para mantener el estado



function createCounter(incial){
    let valor = incial;
    const objeto = {
        incremento : function(){
            valor++;
        },
        decremento : function(){
            valor--;
        },
        devolverValor : function(){
            return valor;
        }
    };

    return objeto;
}


const counter = createCounter(20);
counter.incremento();
console.log(counter.devolverValor())



// 5. Crea una función sumManyTimes(multiplier, ...numbers) que primero sume todos los números (usando parámetros Rest) y luego multiplique el resultado por multiplier




function sumManyTimes(...numbers){

    numbers + numbers + numbers
    
}

// 6. Crea un Callback que se invoque con el resultado de la suma de todos los números que se le pasan a una función

// 7. Desarrolla una función parcial

// 8. Implementa un ejemplo que haga uso de Spread

// 9. Implementa un retorno implícito

// 10. Haz uso del this léxico